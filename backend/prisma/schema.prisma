// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id
  username    String
  avatar      String?
  accessToken String?                   @map("access_token")
  refreshToken String?                  @map("refresh_token")
  createdAt   DateTime @default(now())  @map("created_at")
  updatedAt   DateTime @updatedAt       @map("updated_at")

  @@map("users")
}

model Guild {
  id        String   @id
  name      String
  icon      String?
  createdAt DateTime @default(now())  @map("created_at")
  updatedAt DateTime @updatedAt       @map("updated_at")

  // Configuration
  config GuildConfig?
  
  // Logs
  punishmentLogs PunishmentLog[]

  @@map("guilds")
}

model GuildConfig {
  id      String @id @default(cuid())
  guildId String @unique  @map("guild_id")
  guild   Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)

  // Timeout logging
  timeoutLogEnabled        Boolean @default(false) @map("timeout_log_enabled")
  timeoutLogChannelId      String? @map("timeout_log_channel_id")
  timeoutLogAddTemplate    String? @default("{target} w końcu **dostał przerwę** od {executor} na {timestamp} za **{reason}**.") @map("timeout_log_add_template")
  timeoutLogRemoveTemplate String? @default("niestety {executorId}, jak zbój, zasłużonej **pozbawił przerwy** Czcigodnego {targetId}.") @map("timeout_log_remove_template")

  // Ban logging
  banLogEnabled          Boolean @default(false) @map("ban_log_enabled")
  banLogChannelId        String? @map("ban_log_channel_id")
  banLogMessageTemplate  String? @default("**{moderator}** banned **{target}**\n**Reason:** {reason}") @map("ban_log_message_template")

  // Warn logging
  warnLogEnabled         Boolean @default(false) @map("warn_log_enabled")
  warnLogChannelId       String? @map("warn_log_channel_id")
  warnLogMessageTemplate String? @default("**{moderator}** warned **{target}**\n**Reason:** {reason}") @map("warn_log_message_template")

  // Welcome messages
  welcomeEnabled         Boolean @default(false) @map("welcome_enabled")
  welcomeChannelId       String? @map("welcome_channel_id")
  welcomeMessageTemplate String? @default("Welcome to the server, **{user}**!") @map("welcome_message_template")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")

  @@map("guild_configs")
}

model PunishmentLog {
  id       String @id @default(cuid())
  guildId  String @map("guild_id")
  guild    Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)
  
  // Core punishment data
  type            PunishmentType
  targetId        String         @map("target_id")
  executorId      String         @map("executor_id")
  reason          String?
    
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime?                @map("expires_at") // When the punishment expires (for timeouts)
  
  // Removal tracking
  removedAt       DateTime? @map("removed_at")
  removedByUserId String?   @map("removed_by_user_id")
  
  @@map("punishment_logs")
  
  // Indexes for performance
  @@index([guildId, type])
  @@index([guildId, targetId])
  @@index([guildId, executorId])
  @@index([guildId, createdAt])
  @@index([guildId, type, createdAt])
  @@index([targetId, type])
  @@index([executorId, type])
  @@index([expiresAt])
  @@index([removedAt])
}

enum PunishmentType {
  TIMEOUT
  BAN
  WARN
  KICK
  MUTE
  
  @@map("punishment_type")
}