// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id
  username    String
  avatar      String?
  accessToken String?
  refreshToken String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("users")
}

model Guild {
  id        String   @id
  name      String
  icon      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Configuration
  config GuildConfig?
  
  // Logs
  punishmentLogs PunishmentLog[]

  @@map("guilds")
}

model GuildConfig {
  id      String @id @default(cuid())
  guildId String @unique
  guild   Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)

  // Timeout logging
  timeoutLogEnabled        Boolean @default(false)
  timeoutLogChannelId      String?
  timeoutLogMessageTemplate String? @default("**{moderator}** timed out **{target}** for **{duration}**\n**Reason:** {reason}")

  // Ban logging
  banLogEnabled            Boolean @default(false)
  banLogChannelId          String?
  banLogMessageTemplate    String? @default("**{moderator}** banned **{target}**\n**Reason:** {reason}")

  // Warn logging
  warnLogEnabled           Boolean @default(false)
  warnLogChannelId         String?
  warnLogMessageTemplate   String? @default("**{moderator}** warned **{target}**\n**Reason:** {reason}")

  // Welcome messages
  welcomeEnabled           Boolean @default(false)
  welcomeChannelId         String?
  welcomeMessageTemplate   String? @default("Welcome to the server, **{user}**!")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("guild_configs")
}

model PunishmentLog {
  id       String          @id @default(cuid())
  guildId  String
  guild    Guild           @relation(fields: [guildId], references: [id], onDelete: Cascade)
  
  // Core punishment data
  type            PunishmentType
  targetUserId    String
  moderatorUserId String
  reason          String?
  
  // Duration in seconds (null for permanent bans, warnings, etc.)
  durationSeconds Int?
  
  // Timestamps
  createdAt DateTime @default(now())
  expiresAt DateTime? // When the punishment expires (for timeouts)
  
  // Removal tracking
  removedAt       DateTime?
  removedByUserId String?
  removalReason   String?
  
  // Additional metadata
  metadata Json? // For extensibility (e.g., warning levels, custom fields)

  @@map("punishment_logs")
  
  // Indexes for performance
  @@index([guildId, type])
  @@index([guildId, targetUserId])
  @@index([guildId, moderatorUserId])
  @@index([guildId, createdAt])
  @@index([guildId, type, createdAt])
  @@index([targetUserId, type])
  @@index([moderatorUserId, type])
  @@index([expiresAt])
  @@index([removedAt])
  @@index([durationSeconds])
}

enum PunishmentType {
  TIMEOUT
  BAN
  WARN
  KICK
  MUTE
  
  @@map("punishment_type")
}